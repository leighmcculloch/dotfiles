# make c-p/c-n work exactly like up/down arrows
bindkey "^P" up-line-or-search
bindkey "^N" down-line-or-search

# free up the c-q shortcut for use in vim
stty start undef

source ~/.zenv

# oh-my-zsh
export ZSH=$HOME/.oh-my-zsh
if [[ "$TERM_PROGRAM" != "ghostty" ]]; then
  ZSH_TMUX_AUTOSTART=true
fi
ZSH_CUSTOM="$HOME/.dotfiles/files/oh-my-zsh-custom"
ZSH_THEME="minimal"
plugins=(tmux git fzf git-prompt)
DISABLE_AUTO_UPDATE="false"
source $ZSH/oh-my-zsh.sh

function git() {
  command git config core.hooksPath no-hooks
  command git $@
}

# pull pr alias
function gfpr() {
  local prnum="$1"
  local refspec="pull/$prnum/head:pr$prnum"
  if git config remote.upstream.url; then
    git fetch upstream "$refspec"
  else
    git fetch origin "$refspec"
  fi
}

# general aliases
alias l="ls -lah"

# git aliases (in addition to oh-my-zsh git plugin)
alias ga.="git add ."
alias gap="git add -p"
alias gb="git branch --sort=-committerdate"
alias gde="git diff --exit-code"
alias gdcsv="git diff --color-words=\"[^[:space:],]+\""
alias gdcacsv="git diff --cached --color-words=\"[^[:space:],]+\""
alias gscsv="git show --color-words=\"[^[:space:],]+\""
alias gacnf!="ga . && gcn! && gp -f"
alias gs="git stash"
alias gsp="git stash pop"
alias gid="git rev-parse HEAD"
unalias gc

function gbb() {
  if [ -z "$ANTHROPIC_API_KEY" ]; then
    echo "Error: ANTHROPIC_API_KEY environment variable is not set"
    return 1
  fi

  local branches="${${$(git branch --all --format='%(refname:short)' | jq -R -s '.')%\"}#\"}"

  local diff="$(git diff HEAD)"
  if [ -z "$diff" ]; then
    echo "No changes detected in working directory"
    return 1
  fi

  local escaped_diff="${${$(echo "$diff" | jq -R -s '.')%\"}#\"}"

  local response="$(curl -s -X POST https://api.anthropic.com/v1/messages \
    -H "Content-Type: application/json" \
    -H "x-api-key: $ANTHROPIC_API_KEY" \
    -H "anthropic-version: 2023-06-01" \
    -d '{
      "model": "claude-3-5-sonnet-20241022",
      "max_tokens": 50,
      "system": "You are a senior software engineer.",
      "messages": [{
        "role": "user",
        "content": "Given the following git diff, suggest a concise, kebab-case branch name that describes the changes (max 3 words).\n\nReply only with the branch name, nothing else. \n\nDo not use any of these names: '"${branches}"'. \n\nDiff:\n '"${escaped_diff}"'"
      }]
    }')"

  local name=$(echo "$response" | jq -r '.content[0].text' | tr '[:upper:] ' '[:lower:]-')
  if [ -z "$name" ]; then
    echo "Error: Failed to get branch name from Anthropic API"
    return 1
  fi

  local name="$(gum input --width 50 --char-limit 50 --prompt '| ' --value "$name")"

  git checkout -b "$name" $@
}

function gc() {
  local message=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -m)
        if [[ -n "$2" ]]; then
          message="$2"
          shift 2
          break
        fi
        ;;
    esac
    shift
  done

  if [[ -n "$message" ]]; then
    git commit -m "$message" "$@"
    return
  fi

  if [ -z "$ANTHROPIC_API_KEY" ]; then
    echo "Error: ANTHROPIC_API_KEY environment variable is not set"
    return 1
  fi

  local branch="${${$(git branch --format='%(refname:short)' --show-current | jq -R -s '.')%\"}#\"}"

  local diff="$(git diff --staged)"
  if [ -z "$diff" ]; then
    echo "No staged changes"
    return 1
  fi

  local escaped_diff="${${$(echo "$diff" | jq -R -s '.')%\"}#\"}"

  local response="$(curl -s -X POST https://api.anthropic.com/v1/messages \
    -H "Content-Type: application/json" \
    -H "x-api-key: $ANTHROPIC_API_KEY" \
    -H "anthropic-version: 2023-06-01" \
    -d '{
      "model": "claude-3-5-sonnet-20241022",
      "max_tokens": 50,
      "system": "You are a senior software engineer.",
      "messages": [{
        "role": "user",
        "content": "Given the following git diff, suggest a concise, commit message that says in present tense what has changed without saying why (max 50 characters).\n\nReply only with the commit message, nothing else. Do not use convention commit format. Start the commit message with a lower case letter and do not end with a full stop. Avoid generic phrases. \n\nBranch: '"${branch}"' \n\nDiff:\n '"${escaped_diff}"'"
      }]
    }')"

  local suggestion=$(echo "$response" | jq -r '.content[0].text')
  if [ -z "$suggestion" ]; then
    echo "Error: Failed to get commit message from Anthropic API"
    return 1
  fi

  local message="$(gum write --width 80 --char-limit 99999 --prompt '| ' --value "$suggestion")"

  git commit -m "$message" $@
}

# github aliases
function gprd() {
  if [ -z "$ANTHROPIC_API_KEY" ]; then
    echo "Error: ANTHROPIC_API_KEY environment variable is not set"
    return 1
  fi

  local default_branch="$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name)"
  local diff="$(git log --patch $default_branch..)"
  if [ -z "$diff" ]; then
    echo "No changes detected in working directory"
    return 1
  fi

  local escaped_diff="${${$(echo "$diff" | jq -R -s '.')%\"}#\"}"

  local response="$(curl -s https://api.anthropic.com/v1/messages \
    -H "Content-Type: application/json" \
    -H "x-api-key: $ANTHROPIC_API_KEY" \
    -H "anthropic-version: 2023-06-01" \
    -d '{
      "model": "claude-3-5-sonnet-20241022",
      "max_tokens": 500,
      "system": "You are a senior software engineer.",
      "messages": [{
        "role": "user",
        "content": "Given the following log and diff, suggest a concise pull request title (max 50 characters) and description, where the description is separated into two sections. The first section is under the heading \"What\" and describes in present tense what has changed. The second section is under the heading \"Why\" and describes why the change is being made.\n\nReply only with the title, what, and why in valid JSON format {\"title\":\"\",\"what\":\"\",\"why\":\"\"}, on a single line, nothing else. Start the title with a capital letter but do not end with a full stop. Use full sentences for what and why. Avoid generic phrases. \n\nLog with Diff:\n '"${escaped_diff}"'"
      }]
    }')"

  local suggestion=$(echo "$response" | jq -r '.content[0].text')
  if [ -z "$suggestion" ]; then
    echo "Error: Failed to get commit message from Anthropic API"
    return 1
  fi

  local suggestion_title=$(echo "$suggestion" | jq -r '.title')
  local suggestion_what=$(echo "$suggestion" | jq -r '.what')
  local suggestion_why=$(echo "$suggestion" | jq -r '.why')

  echo "Title:"
  local title="$(gum input --width 50 --prompt '| ' --value "$suggestion_title")"
  echo "$title"

  echo "What:"
  local what="$(gum write --width 80 --prompt '| ' --value "$suggestion_what")"
  echo "$what"

  echo "Why:"
  local why="$(gum write --width 80 --char-limit 99999 --prompt '| ' --value "$suggestion_why")"
  echo "$why"

  echo "Reviewer:"
  local reviewer="$(gum choose --no-limit \
    $(gh api '/repos/{owner}/{repo}/contributors' --jq '.[].login')
  )"
  echo "$reviewer"

  gh pr create \
    --draft \
    --title "$title" \
    --body "### What
$what

### Why
$why" \
    --reviewer "$(IFS=,; echo -n "${reviewer[*]}")" \
    $@
}

# zsh opts
unsetopt HIST_VERIFY

# print exit code once after last command output
function track-exec-command() {
  zsh_exec_command=1
}
function print-exit-code() {
  local -i code=$?
  (( code == 0 )) && return
  (( zsh_exec_command != 1 )) && return
  unset zsh_exec_command
  print -rC1 -- ''${(%):-"%F{160}âœ˜ exit status $code%f"}''
}
autoload -Uz add-zsh-hook
add-zsh-hook preexec track-exec-command
add-zsh-hook precmd print-exit-code
